## 1부터 n까지의 합 구하기  2021-03-02

def fnc1(n): ## 계산하는 데 필요한 사칙연산의 횟수 : n번 O(n)
    sum = 0
    for i in range(1,n+1):
        sum+=i
    return sum

def fnc2(n): ## 계산하는 데 필요한 사칙연산의 횟수 : 3번 O(1)
    sum = (n * (n+1))//2 # //는 정수 나눗셈을 의미, 결과에 소수점 붙지 않음
    return sum

print(fnc1(10))
print(fnc2(100))

## 분석 : 두번째 방법은 첫번째 방법보다 반복횟수가 적기 때문에 계산복잡도가 전자보다 복잡하지 않다, 따라서 fnc2가 더 효율적이다.

## 1-1 : 1부터 n까지 연속한 숫자의 제곱의 합을 구하는 프로그램을 for 반복문으로 만들어보자

def fnc3(n):
    sum = 0
    for i in range(1, n+1):
        sum+= i*i
    return sum

print(fnc3(10))

# 1-2 : 1-1의 프로그램의 계산복잡도는 O(1)과 O(n) 중 무엇일까? O(n)

# 1-3 : 1부터 n까지 연속한 숫자의 제곱의 합을 구하는 공식은 (n*(n+1)*((2*n)+1))/6 으로 알려져 있습니다. for 반복문 대신 이 공식을 이용하면 알고리즘의 계산 복잡도는 O(1)과 O(n)중에 무엇이 될까요? O(1)
def fnc4(n):
    sum = (n*(n+1)*((2*n)+1))//6
    return sum

print(fnc4(10))